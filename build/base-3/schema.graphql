type Account @entity {
  id: ID!
  accountId: BigInt!
  owner: Bytes!
  feesPaid: BigInt!
  pnl: BigInt!
  totalMargin: BigInt!
  totalLiquidations: BigInt!
  totalTrades: BigInt!
  totalVolume: BigInt!
  totalOpenPositions: BigInt!
  totalClosedPositions: BigInt!
  positions: [Position!] @derivedFrom(field: "account")
  liquidations: [Liquidation!] @derivedFrom(field: "account")
}

type AccountAggregateStat @entity {
  id: ID!
  account: Account!
  market: Market!
  positionPnl: BigInt!
  accountPnl: BigInt!
  timestamp: BigInt!
  block: BigInt!
}



type Market @entity {
  id: ID!
  perpsMarketId: BigInt!
  marketName: String!
  marketSymbol: String!
  price: BigInt!
  skew: BigInt
  size: BigInt
  sizeDelta: BigInt
  currentFundingRate: BigInt
  currentFundingVelocity: BigInt
  interestRate: BigInt
  feedId: Bytes
  maxFundingVelocity: BigInt
  skewScale: BigInt
  lockedOiPercent: BigInt
  initialMarginRatioD18: BigInt
  minimumInitialMarginRatioD18: BigInt
  maintenanceMarginRatioD18: BigInt
  liquidationRewardRatioD18: BigInt
  flagRewardRatioD18: BigInt
  minimumPositionMargin: BigInt
  maxSecondsInLiquidationWindow: BigInt
  maxLiquidationLimitAccumulationMultiplier: BigInt
  makerFee: BigInt
  takerFee: BigInt
  positions: [Position!] @derivedFrom(field: "market")
  liquidations: [Liquidation!] @derivedFrom(field: "market")
}


type Trade @entity {
  id: ID!
  position: Position!
  account: Account!
  market: Market!
  fillPrice: BigInt!
  averageEntryPrice: BigInt!
  pnl: BigInt!
  realizedPnl: BigInt!
  accruedFunding: BigInt!
  sizeDelta: BigInt!
  newSize: BigInt!
  volume: BigInt!
  notionalAmount: BigInt!
  totalFees: BigInt!
  referralFees: BigInt!
  collectedFees: BigInt!
  settlementReward: BigInt
  trackingCode: Bytes
  settler: Bytes!
  block: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
  interestCharged: BigInt!
  tradeType: ActionType!
}

enum PositionStatus {
  OPEN
  CLOSED
  LIQUIDATED
}

enum Direction {
  LONG
  SHORT
}

type Position @entity {
  id: ID!
  market: Market! 
  account: Account!
  trackingCode: Bytes
  isOpen: Boolean!
  isLiquidated: Boolean!
  status: PositionStatus!
  direction: Direction!
  openTimestamp: BigInt!
  closeTimestamp: BigInt
  lastTradeTimestamp: BigInt!
  entryPrice: BigInt!
  exitPrice: BigInt
  lastFillPrice: BigInt!
  size: BigInt!
  notionalAmount: BigInt!
  realizedPnl: BigInt!
  realizedPnlWithFees: BigInt!
  positionPnl: BigInt!
  totalFees: BigInt!
  totalVolume: BigInt!
  totalTrades: BigInt!
  accruedFunding: BigInt!
  interestCharged: BigInt!
  trades: [Trade!] @derivedFrom(field: "position")
  liquidation: Liquidation
  averageEntryPrice: BigInt!
  unrealizedPnl: BigInt!
}

type OpenPosition @entity {
  id: ID!
  position: Position!
}

type PositionReference @entity {
  id: ID!
  accountId: BigInt!
  marketId: BigInt!
  positionId: String!
  tradeId: String!
  transactionHash: Bytes!
  block: BigInt!
}

enum LiquidationType {
  PARTIAL
  FULL
}

type Liquidation @entity {
  id: ID!
  timestamp: BigInt!
  transactionHash: Bytes!
  account: Account!
  accountId: BigInt!
  market: Market!
  marketId: BigInt!
  amountLiquidated: BigInt!
  liquidationType: LiquidationType!
  currentPositionSize: BigInt!
  notionalAmount: BigInt!
  marketPrice: BigInt!
  position: Position @derivedFrom(field: "liquidation")
}

enum ActionType {
  LONG_OPENED
  LONG_CLOSED
  LONG_INCREASED
  LONG_DECREASED
  SHORT_OPENED
  SHORT_CLOSED
  SHORT_INCREASED
  SHORT_DECREASED
  DEPOSIT_MARGIN
  WITHDRAW_MARGIN
}

enum ActionCategory {
  TRADE
  COLLATERAL
}

type Action @entity {
  id: ID!
  account: Account!
  accountId: BigInt!
  market: Market
  marketId: BigInt
  positionId: String
  actionType: ActionType!
  amount: BigInt # Relevant for collateral modifications
  sizeDelta: BigInt # Relevant for trades
  volume: BigInt # Relevant for trades
  fillPrice: BigInt # Relevant for trades
  accruedFunding: BigInt # Relevant for trades
  pnl: BigInt # Relevant for trades
  totalFees: BigInt # Relevant for trades
  referralFees: BigInt # Relevant for trades
  collectedFees: BigInt # Relevant for trades
  settlementReward: BigInt # Relevant for trades
  trackingCode: Bytes # Relevant for trades
  settler: Bytes # Relevant for trades
  actionTimestamp: BigInt!
  transactionHash: Bytes!
}



type SettlementStrategy @entity {
  id: ID!
  strategyId: BigInt!
  marketId: BigInt!
  enabled: Boolean
  strategyType: Int
  settlementDelay: BigInt
  settlementWindowDuration: BigInt
  priceVerificationContract: String
  feedId: Bytes
  settlementReward: BigInt
  minimumUsdExchangeAmount: BigInt
  maxRoundingLoss: BigInt
  commitmentPriceDelay: BigInt
}

type ReferrerShare @entity {
  id: ID!
  referrer: String
  shareRatioD18: BigInt
}

type GlobalConfiguration @entity {
  id: ID!
  feeCollector: String
}

# Positions Entity, Liquidations Entity. Use Raw events to build objects

# raw events
type AccountLiquidated @entity {
  id: ID!
  timestamp: BigInt!
  accountId: BigInt!
  liquidationReward: BigInt!
  fullyLiquidated: Boolean!
}

type PositionLiquidated @entity {
  id: ID!
  timestamp: BigInt!
  accountId: BigInt!
  marketId: BigInt!
  amountLiquidated: BigInt!
  currentPositionSize: BigInt!
  transactionHash: Bytes!
}

enum CollateralActionType {
  DEPOSIT
  WITHDRAWAL
}

type CollateralModified @entity {
  id: ID!
  timestamp: BigInt!
  accountId: BigInt!
  synthMarketId: BigInt!
  amount: BigInt!
  sender: Bytes!
  transactionHash: Bytes!
  actionType: CollateralActionType!
}

type MarketUpdated @entity {
  id: ID!
  timestamp: BigInt!
  marketId: BigInt!
  price: BigInt!
  skew: BigInt!
  size: BigInt!
  sizeDelta: BigInt!
  currentFundingRate: BigInt!
  currentFundingVelocity: BigInt!
}

type InterestCharged @entity {
  id: ID!
  timestamp: BigInt!
  block: BigInt!
  accountId: BigInt!
  interest: BigInt!
  txHash: Bytes!
}

type AccountFlaggedForLiquidation @entity {
  id: ID!
  account: Account!
  accountId: BigInt!
  availableMargin: BigInt!
  requiredMaintenanceMargin: BigInt!
  liquidationReward: BigInt!
  flagReward: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}