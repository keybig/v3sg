type Account @entity {
  id: ID!
  accountId: BigInt!
  owner: Bytes!
  orders: [Order!] @derivedFrom(field: "account")
}

type Market @entity {
  id: ID!
  perpsMarketId: BigInt!
  marketName: String
  marketSymbol: String
  price: BigInt
  skew: BigInt
  size: BigInt
  sizeDelta: BigInt
  currentFundingRate: BigInt
  currentFundingVelocity: BigInt
  interestRate: BigInt
  feedId: Bytes
  maxFundingVelocity: BigInt
  skewScale: BigInt
  lockedOiPercent: BigInt
  marketOwner: String
  owner: String
  initialMarginRatioD18: BigInt
  maintenanceMarginRatioD18: BigInt
  liquidationRewardRatioD18: BigInt
  maxSecondsInLiquidationWindow: BigInt
  minimumPositionMargin: BigInt
  maxLiquidationLimitAccumulationMultiplier: BigInt
  makerFee: BigInt
  takerFee: BigInt
  factoryInitialized: Boolean
  #new
  orders: [Order!] @derivedFrom(field: "market")
}

enum OrderState {
  SETTLED
  COMMITTED
  CANCELLED
  EXPIRED
}

type Order @entity { #trades
  id: ID!
  market: Market! #new
  account: Account! #new
  marketId: BigInt
  accountId: BigInt
  accountAddress:Bytes
  amountProvided: BigInt
  orderType: Int
  size: BigInt
  acceptablePrice: BigInt
  settlementTime: BigInt
  expirationTime: BigInt
  trackingCode: Bytes
  owner: String
  orderState: OrderState
  fillPrice: BigInt
  accountPnlRealized: BigInt
  newSize: BigInt
  collectedFees: BigInt
  settlementReward: BigInt
  settler: String
  position: Position # position entity
  block: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes
}

type Position @entity { #trades
  id: ID!
  trades: [OrderSettled!] @derivedFrom(field: "position")
  totalTrades: BigInt!
  openTimestamp: BigInt!
  closeTimestamp: BigInt
  entryPrice: BigInt!
  exitPrice: BigInt
  averageEntryPrice: BigInt!
  isOpen: Boolean!
  isLiquidated: Boolean
  market: Market!
  account: Account!
  size: BigInt!
  realizedPnl: BigInt!
  totalFees: BigInt!
  trackingCode: Bytes
  accruedFunding: BigInt!
  pnlWithFeesPaid: BigInt
}

type OpenPosition @entity {
  id: ID!
  position: Position
}

type AccountStat @entity {
  id: ID!
  accountId: BigInt!
  accountOwner: Bytes!
  feesPaid: BigInt!
  pnl: BigInt!
  pnlWithFeesPaid: BigInt!
  liquidations: BigInt!
  totalTrades: BigInt!
  totalVolume: BigInt!
}


type SettlementStrategy @entity {
  id: ID!
  strategyId: BigInt!
  marketId: BigInt!
  enabled: Boolean
  strategyType: Int
  settlementDelay: BigInt
  settlementWindowDuration: BigInt
  priceVerificationContract: String
  feedId: Bytes
  settlementReward: BigInt
  minimumUsdExchangeAmount: BigInt
  maxRoundingLoss: BigInt
  commitmentPriceDelay: BigInt
}

type ReferrerShare @entity {
  id: ID!
  referrer: String
  shareRatioD18: BigInt
}

type GlobalConfiguration @entity {
  id: ID!
  feeCollector: String
}

# Positions Entity, Liquidations Entity. Use Raw events to build objects

# raw events
type AccountLiquidated @entity {
  id: ID!
  timestamp: BigInt!
  accountId: BigInt!
  liquidationReward: BigInt!
  fullyLiquidated: Boolean!
}

type PositionLiquidated @entity {
  id: ID!
  timestamp: BigInt!
  accountId: BigInt!
  marketId: BigInt!
  amountLiquidated: BigInt!
  currentPositionSize: BigInt!
  transactionHash: Bytes!
}

type CollateralModified @entity {
  id: ID!
  timestamp: BigInt!
  accountId: BigInt!
  synthMarketId: BigInt!
  amount: BigInt!
  sender: Bytes!
  transactionHash: Bytes!
}

type OrderCommitted @entity {
  id: ID!
  timestamp: BigInt!
  marketId: BigInt!
  accountId: BigInt!
  orderType: Int!
  sizeDelta: BigInt!
  acceptablePrice: BigInt!
  settlementTime: BigInt!
  expirationTime: BigInt!
  trackingCode: Bytes!
  sender: Bytes!
  transactionHash: Bytes!
}

type OrderSettled @entity {
  id: ID!
  timestamp: BigInt!
  marketId: BigInt!
  accountId: BigInt!
  account: Account!
  market: Market!
  fillPrice: BigInt!
  accruedFunding: BigInt!
  sizeDelta: BigInt!
  newSize: BigInt!
  totalFees: BigInt!
  referralFees: BigInt!
  collectedFees: BigInt!
  settlementReward: BigInt!
  trackingCode: Bytes!
  settler: Bytes!
  transactionHash: Bytes!
  orderCommitted: OrderCommitted
  interestCharged: BigInt
  position: Position
}

type PreviousOrderExpired @entity {
  id: ID!
  timestamp: BigInt!
  marketId: BigInt!
  accountId: BigInt!
  sizeDelta: BigInt!
  acceptablePrice: BigInt!
  settlementTime: BigInt
  trackingCode: Bytes!
}

type OrderCancelled @entity {
  id: ID! # Unique identifier for the order cancellation event
  marketId: BigInt! # ID of the market where the order was cancelled
  accountId: BigInt! # ID of the account that cancelled the order
  desiredPrice: BigInt! # The price at which the order was cancelled
  fillPrice: BigInt! # The actual price at which the order was cancelled
  sizeDelta: BigInt! # Size delta from the order
  settlementReward: BigInt! # Fees collected by the settler
  trackingCode: Bytes! # Optional tracking code for integrator purposes
  settler: Bytes! # Address of the settler of the order
  timestamp: BigInt! # The block timestamp when the event occurred
  txnHash: Bytes! # The transaction hash for the event
}


type MarketUpdated @entity {
  id: ID!
  timestamp: BigInt!
  marketId: BigInt!
  price: BigInt!
  skew: BigInt!
  size: BigInt!
  sizeDelta: BigInt!
  currentFundingRate: BigInt!
  currentFundingVelocity: BigInt!
}

type InterestCharged @entity {
  id: ID!
  timestamp: BigInt!
  block: BigInt!
  accountId: BigInt!
  interest: BigInt!
  txHash: Bytes!
}
