// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accountId(): BigInt {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountId(value: BigInt) {
    this.set("accountId", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get feesPaid(): BigInt {
    let value = this.get("feesPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feesPaid(value: BigInt) {
    this.set("feesPaid", Value.fromBigInt(value));
  }

  get pnl(): BigInt {
    let value = this.get("pnl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pnl(value: BigInt) {
    this.set("pnl", Value.fromBigInt(value));
  }

  get totalLiquidations(): BigInt {
    let value = this.get("totalLiquidations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidations(value: BigInt) {
    this.set("totalLiquidations", Value.fromBigInt(value));
  }

  get totalTrades(): BigInt {
    let value = this.get("totalTrades");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTrades(value: BigInt) {
    this.set("totalTrades", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get positions(): PositionLoader {
    return new PositionLoader(
      "Account",
      this.get("id")!.toString(),
      "positions",
    );
  }

  get liquidations(): LiquidationLoader {
    return new LiquidationLoader(
      "Account",
      this.get("id")!.toString(),
      "liquidations",
    );
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Market must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Market", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Market | null {
    return changetype<Market | null>(store.get_in_block("Market", id));
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get perpsMarketId(): BigInt {
    let value = this.get("perpsMarketId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set perpsMarketId(value: BigInt) {
    this.set("perpsMarketId", Value.fromBigInt(value));
  }

  get marketName(): string {
    let value = this.get("marketName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set marketName(value: string) {
    this.set("marketName", Value.fromString(value));
  }

  get marketSymbol(): string {
    let value = this.get("marketSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set marketSymbol(value: string) {
    this.set("marketSymbol", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get skew(): BigInt | null {
    let value = this.get("skew");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set skew(value: BigInt | null) {
    if (!value) {
      this.unset("skew");
    } else {
      this.set("skew", Value.fromBigInt(<BigInt>value));
    }
  }

  get size(): BigInt | null {
    let value = this.get("size");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set size(value: BigInt | null) {
    if (!value) {
      this.unset("size");
    } else {
      this.set("size", Value.fromBigInt(<BigInt>value));
    }
  }

  get sizeDelta(): BigInt | null {
    let value = this.get("sizeDelta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sizeDelta(value: BigInt | null) {
    if (!value) {
      this.unset("sizeDelta");
    } else {
      this.set("sizeDelta", Value.fromBigInt(<BigInt>value));
    }
  }

  get currentFundingRate(): BigInt | null {
    let value = this.get("currentFundingRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentFundingRate(value: BigInt | null) {
    if (!value) {
      this.unset("currentFundingRate");
    } else {
      this.set("currentFundingRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get currentFundingVelocity(): BigInt | null {
    let value = this.get("currentFundingVelocity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentFundingVelocity(value: BigInt | null) {
    if (!value) {
      this.unset("currentFundingVelocity");
    } else {
      this.set("currentFundingVelocity", Value.fromBigInt(<BigInt>value));
    }
  }

  get interestRate(): BigInt | null {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set interestRate(value: BigInt | null) {
    if (!value) {
      this.unset("interestRate");
    } else {
      this.set("interestRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get feedId(): Bytes | null {
    let value = this.get("feedId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feedId(value: Bytes | null) {
    if (!value) {
      this.unset("feedId");
    } else {
      this.set("feedId", Value.fromBytes(<Bytes>value));
    }
  }

  get maxFundingVelocity(): BigInt | null {
    let value = this.get("maxFundingVelocity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxFundingVelocity(value: BigInt | null) {
    if (!value) {
      this.unset("maxFundingVelocity");
    } else {
      this.set("maxFundingVelocity", Value.fromBigInt(<BigInt>value));
    }
  }

  get skewScale(): BigInt | null {
    let value = this.get("skewScale");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set skewScale(value: BigInt | null) {
    if (!value) {
      this.unset("skewScale");
    } else {
      this.set("skewScale", Value.fromBigInt(<BigInt>value));
    }
  }

  get lockedOiPercent(): BigInt | null {
    let value = this.get("lockedOiPercent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockedOiPercent(value: BigInt | null) {
    if (!value) {
      this.unset("lockedOiPercent");
    } else {
      this.set("lockedOiPercent", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialMarginRatioD18(): BigInt | null {
    let value = this.get("initialMarginRatioD18");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialMarginRatioD18(value: BigInt | null) {
    if (!value) {
      this.unset("initialMarginRatioD18");
    } else {
      this.set("initialMarginRatioD18", Value.fromBigInt(<BigInt>value));
    }
  }

  get minimumInitialMarginRatioD18(): BigInt | null {
    let value = this.get("minimumInitialMarginRatioD18");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minimumInitialMarginRatioD18(value: BigInt | null) {
    if (!value) {
      this.unset("minimumInitialMarginRatioD18");
    } else {
      this.set("minimumInitialMarginRatioD18", Value.fromBigInt(<BigInt>value));
    }
  }

  get maintenanceMarginRatioD18(): BigInt | null {
    let value = this.get("maintenanceMarginRatioD18");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maintenanceMarginRatioD18(value: BigInt | null) {
    if (!value) {
      this.unset("maintenanceMarginRatioD18");
    } else {
      this.set("maintenanceMarginRatioD18", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidationRewardRatioD18(): BigInt | null {
    let value = this.get("liquidationRewardRatioD18");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationRewardRatioD18(value: BigInt | null) {
    if (!value) {
      this.unset("liquidationRewardRatioD18");
    } else {
      this.set("liquidationRewardRatioD18", Value.fromBigInt(<BigInt>value));
    }
  }

  get flagRewardRatioD18(): BigInt | null {
    let value = this.get("flagRewardRatioD18");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set flagRewardRatioD18(value: BigInt | null) {
    if (!value) {
      this.unset("flagRewardRatioD18");
    } else {
      this.set("flagRewardRatioD18", Value.fromBigInt(<BigInt>value));
    }
  }

  get minimumPositionMargin(): BigInt | null {
    let value = this.get("minimumPositionMargin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minimumPositionMargin(value: BigInt | null) {
    if (!value) {
      this.unset("minimumPositionMargin");
    } else {
      this.set("minimumPositionMargin", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxSecondsInLiquidationWindow(): BigInt | null {
    let value = this.get("maxSecondsInLiquidationWindow");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxSecondsInLiquidationWindow(value: BigInt | null) {
    if (!value) {
      this.unset("maxSecondsInLiquidationWindow");
    } else {
      this.set(
        "maxSecondsInLiquidationWindow",
        Value.fromBigInt(<BigInt>value),
      );
    }
  }

  get maxLiquidationLimitAccumulationMultiplier(): BigInt | null {
    let value = this.get("maxLiquidationLimitAccumulationMultiplier");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxLiquidationLimitAccumulationMultiplier(value: BigInt | null) {
    if (!value) {
      this.unset("maxLiquidationLimitAccumulationMultiplier");
    } else {
      this.set(
        "maxLiquidationLimitAccumulationMultiplier",
        Value.fromBigInt(<BigInt>value),
      );
    }
  }

  get makerFee(): BigInt | null {
    let value = this.get("makerFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set makerFee(value: BigInt | null) {
    if (!value) {
      this.unset("makerFee");
    } else {
      this.set("makerFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get takerFee(): BigInt | null {
    let value = this.get("takerFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set takerFee(value: BigInt | null) {
    if (!value) {
      this.unset("takerFee");
    } else {
      this.set("takerFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get positions(): PositionLoader {
    return new PositionLoader(
      "Market",
      this.get("id")!.toString(),
      "positions",
    );
  }

  get liquidations(): LiquidationLoader {
    return new LiquidationLoader(
      "Market",
      this.get("id")!.toString(),
      "liquidations",
    );
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Trade must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Trade", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Trade | null {
    return changetype<Trade | null>(store.get_in_block("Trade", id));
  }

  static load(id: string): Trade | null {
    return changetype<Trade | null>(store.get("Trade", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get fillPrice(): BigInt {
    let value = this.get("fillPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fillPrice(value: BigInt) {
    this.set("fillPrice", Value.fromBigInt(value));
  }

  get pnl(): BigInt {
    let value = this.get("pnl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pnl(value: BigInt) {
    this.set("pnl", Value.fromBigInt(value));
  }

  get accruedFunding(): BigInt {
    let value = this.get("accruedFunding");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accruedFunding(value: BigInt) {
    this.set("accruedFunding", Value.fromBigInt(value));
  }

  get sizeDelta(): BigInt {
    let value = this.get("sizeDelta");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sizeDelta(value: BigInt) {
    this.set("sizeDelta", Value.fromBigInt(value));
  }

  get newSize(): BigInt {
    let value = this.get("newSize");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newSize(value: BigInt) {
    this.set("newSize", Value.fromBigInt(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get notionalAmount(): BigInt {
    let value = this.get("notionalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set notionalAmount(value: BigInt) {
    this.set("notionalAmount", Value.fromBigInt(value));
  }

  get totalFees(): BigInt {
    let value = this.get("totalFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalFees(value: BigInt) {
    this.set("totalFees", Value.fromBigInt(value));
  }

  get referralFees(): BigInt {
    let value = this.get("referralFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set referralFees(value: BigInt) {
    this.set("referralFees", Value.fromBigInt(value));
  }

  get collectedFees(): BigInt {
    let value = this.get("collectedFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collectedFees(value: BigInt) {
    this.set("collectedFees", Value.fromBigInt(value));
  }

  get settlementReward(): BigInt | null {
    let value = this.get("settlementReward");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settlementReward(value: BigInt | null) {
    if (!value) {
      this.unset("settlementReward");
    } else {
      this.set("settlementReward", Value.fromBigInt(<BigInt>value));
    }
  }

  get trackingCode(): Bytes | null {
    let value = this.get("trackingCode");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set trackingCode(value: Bytes | null) {
    if (!value) {
      this.unset("trackingCode");
    } else {
      this.set("trackingCode", Value.fromBytes(<Bytes>value));
    }
  }

  get settler(): Bytes {
    let value = this.get("settler");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set settler(value: Bytes) {
    this.set("settler", Value.fromBytes(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get interestCharged(): BigInt | null {
    let value = this.get("interestCharged");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set interestCharged(value: BigInt | null) {
    if (!value) {
      this.unset("interestCharged");
    } else {
      this.set("interestCharged", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Position must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Position", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Position | null {
    return changetype<Position | null>(store.get_in_block("Position", id));
  }

  static load(id: string): Position | null {
    return changetype<Position | null>(store.get("Position", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get trackingCode(): Bytes | null {
    let value = this.get("trackingCode");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set trackingCode(value: Bytes | null) {
    if (!value) {
      this.unset("trackingCode");
    } else {
      this.set("trackingCode", Value.fromBytes(<Bytes>value));
    }
  }

  get isOpen(): boolean {
    let value = this.get("isOpen");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isOpen(value: boolean) {
    this.set("isOpen", Value.fromBoolean(value));
  }

  get isLiquidated(): boolean {
    let value = this.get("isLiquidated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isLiquidated(value: boolean) {
    this.set("isLiquidated", Value.fromBoolean(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get direction(): string {
    let value = this.get("direction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set direction(value: string) {
    this.set("direction", Value.fromString(value));
  }

  get openTimestamp(): BigInt {
    let value = this.get("openTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openTimestamp(value: BigInt) {
    this.set("openTimestamp", Value.fromBigInt(value));
  }

  get closeTimestamp(): BigInt | null {
    let value = this.get("closeTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closeTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("closeTimestamp");
    } else {
      this.set("closeTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get entryPrice(): BigInt {
    let value = this.get("entryPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set entryPrice(value: BigInt) {
    this.set("entryPrice", Value.fromBigInt(value));
  }

  get exitPrice(): BigInt | null {
    let value = this.get("exitPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exitPrice(value: BigInt | null) {
    if (!value) {
      this.unset("exitPrice");
    } else {
      this.set("exitPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastFillPrice(): BigInt {
    let value = this.get("lastFillPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastFillPrice(value: BigInt) {
    this.set("lastFillPrice", Value.fromBigInt(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get notionalAmount(): BigInt {
    let value = this.get("notionalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set notionalAmount(value: BigInt) {
    this.set("notionalAmount", Value.fromBigInt(value));
  }

  get realizedPnl(): BigInt {
    let value = this.get("realizedPnl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set realizedPnl(value: BigInt) {
    this.set("realizedPnl", Value.fromBigInt(value));
  }

  get totalFees(): BigInt {
    let value = this.get("totalFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalFees(value: BigInt) {
    this.set("totalFees", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get totalTrades(): BigInt {
    let value = this.get("totalTrades");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTrades(value: BigInt) {
    this.set("totalTrades", Value.fromBigInt(value));
  }

  get accruedFunding(): BigInt {
    let value = this.get("accruedFunding");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accruedFunding(value: BigInt) {
    this.set("accruedFunding", Value.fromBigInt(value));
  }

  get interestCharged(): BigInt {
    let value = this.get("interestCharged");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestCharged(value: BigInt) {
    this.set("interestCharged", Value.fromBigInt(value));
  }

  get trades(): TradeLoader {
    return new TradeLoader("Position", this.get("id")!.toString(), "trades");
  }

  get liquidation(): string | null {
    let value = this.get("liquidation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidation(value: string | null) {
    if (!value) {
      this.unset("liquidation");
    } else {
      this.set("liquidation", Value.fromString(<string>value));
    }
  }
}

export class OpenPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OpenPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OpenPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("OpenPosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): OpenPosition | null {
    return changetype<OpenPosition | null>(
      store.get_in_block("OpenPosition", id),
    );
  }

  static load(id: string): OpenPosition | null {
    return changetype<OpenPosition | null>(store.get("OpenPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }
}

export class Liquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Liquidation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Liquidation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Liquidation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Liquidation | null {
    return changetype<Liquidation | null>(
      store.get_in_block("Liquidation", id),
    );
  }

  static load(id: string): Liquidation | null {
    return changetype<Liquidation | null>(store.get("Liquidation", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get accountId(): BigInt {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountId(value: BigInt) {
    this.set("accountId", Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get marketId(): BigInt {
    let value = this.get("marketId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketId(value: BigInt) {
    this.set("marketId", Value.fromBigInt(value));
  }

  get amountLiquidated(): BigInt {
    let value = this.get("amountLiquidated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountLiquidated(value: BigInt) {
    this.set("amountLiquidated", Value.fromBigInt(value));
  }

  get liquidationType(): string {
    let value = this.get("liquidationType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set liquidationType(value: string) {
    this.set("liquidationType", Value.fromString(value));
  }

  get currentPositionSize(): BigInt {
    let value = this.get("currentPositionSize");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentPositionSize(value: BigInt) {
    this.set("currentPositionSize", Value.fromBigInt(value));
  }

  get notionalAmount(): BigInt {
    let value = this.get("notionalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set notionalAmount(value: BigInt) {
    this.set("notionalAmount", Value.fromBigInt(value));
  }

  get marketPrice(): BigInt {
    let value = this.get("marketPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketPrice(value: BigInt) {
    this.set("marketPrice", Value.fromBigInt(value));
  }

  get position(): PositionLoader {
    return new PositionLoader(
      "Liquidation",
      this.get("id")!.toString(),
      "position",
    );
  }
}

export class AccountStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AccountStat", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AccountStat | null {
    return changetype<AccountStat | null>(
      store.get_in_block("AccountStat", id),
    );
  }

  static load(id: string): AccountStat | null {
    return changetype<AccountStat | null>(store.get("AccountStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accountId(): BigInt {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountId(value: BigInt) {
    this.set("accountId", Value.fromBigInt(value));
  }

  get accountOwner(): Bytes {
    let value = this.get("accountOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set accountOwner(value: Bytes) {
    this.set("accountOwner", Value.fromBytes(value));
  }

  get pnl(): BigInt {
    let value = this.get("pnl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pnl(value: BigInt) {
    this.set("pnl", Value.fromBigInt(value));
  }

  get liquidations(): BigInt {
    let value = this.get("liquidations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidations(value: BigInt) {
    this.set("liquidations", Value.fromBigInt(value));
  }

  get totalTrades(): BigInt {
    let value = this.get("totalTrades");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTrades(value: BigInt) {
    this.set("totalTrades", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class SettlementStrategy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SettlementStrategy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SettlementStrategy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SettlementStrategy", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SettlementStrategy | null {
    return changetype<SettlementStrategy | null>(
      store.get_in_block("SettlementStrategy", id),
    );
  }

  static load(id: string): SettlementStrategy | null {
    return changetype<SettlementStrategy | null>(
      store.get("SettlementStrategy", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get strategyId(): BigInt {
    let value = this.get("strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set strategyId(value: BigInt) {
    this.set("strategyId", Value.fromBigInt(value));
  }

  get marketId(): BigInt {
    let value = this.get("marketId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketId(value: BigInt) {
    this.set("marketId", Value.fromBigInt(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }

  get strategyType(): i32 {
    let value = this.get("strategyType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set strategyType(value: i32) {
    this.set("strategyType", Value.fromI32(value));
  }

  get settlementDelay(): BigInt | null {
    let value = this.get("settlementDelay");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settlementDelay(value: BigInt | null) {
    if (!value) {
      this.unset("settlementDelay");
    } else {
      this.set("settlementDelay", Value.fromBigInt(<BigInt>value));
    }
  }

  get settlementWindowDuration(): BigInt | null {
    let value = this.get("settlementWindowDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settlementWindowDuration(value: BigInt | null) {
    if (!value) {
      this.unset("settlementWindowDuration");
    } else {
      this.set("settlementWindowDuration", Value.fromBigInt(<BigInt>value));
    }
  }

  get priceVerificationContract(): string | null {
    let value = this.get("priceVerificationContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set priceVerificationContract(value: string | null) {
    if (!value) {
      this.unset("priceVerificationContract");
    } else {
      this.set("priceVerificationContract", Value.fromString(<string>value));
    }
  }

  get feedId(): Bytes | null {
    let value = this.get("feedId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feedId(value: Bytes | null) {
    if (!value) {
      this.unset("feedId");
    } else {
      this.set("feedId", Value.fromBytes(<Bytes>value));
    }
  }

  get settlementReward(): BigInt | null {
    let value = this.get("settlementReward");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settlementReward(value: BigInt | null) {
    if (!value) {
      this.unset("settlementReward");
    } else {
      this.set("settlementReward", Value.fromBigInt(<BigInt>value));
    }
  }

  get minimumUsdExchangeAmount(): BigInt | null {
    let value = this.get("minimumUsdExchangeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minimumUsdExchangeAmount(value: BigInt | null) {
    if (!value) {
      this.unset("minimumUsdExchangeAmount");
    } else {
      this.set("minimumUsdExchangeAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxRoundingLoss(): BigInt | null {
    let value = this.get("maxRoundingLoss");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxRoundingLoss(value: BigInt | null) {
    if (!value) {
      this.unset("maxRoundingLoss");
    } else {
      this.set("maxRoundingLoss", Value.fromBigInt(<BigInt>value));
    }
  }

  get commitmentPriceDelay(): BigInt | null {
    let value = this.get("commitmentPriceDelay");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set commitmentPriceDelay(value: BigInt | null) {
    if (!value) {
      this.unset("commitmentPriceDelay");
    } else {
      this.set("commitmentPriceDelay", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ReferrerShare extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReferrerShare entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReferrerShare must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ReferrerShare", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ReferrerShare | null {
    return changetype<ReferrerShare | null>(
      store.get_in_block("ReferrerShare", id),
    );
  }

  static load(id: string): ReferrerShare | null {
    return changetype<ReferrerShare | null>(store.get("ReferrerShare", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get referrer(): string | null {
    let value = this.get("referrer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set referrer(value: string | null) {
    if (!value) {
      this.unset("referrer");
    } else {
      this.set("referrer", Value.fromString(<string>value));
    }
  }

  get shareRatioD18(): BigInt | null {
    let value = this.get("shareRatioD18");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set shareRatioD18(value: BigInt | null) {
    if (!value) {
      this.unset("shareRatioD18");
    } else {
      this.set("shareRatioD18", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class GlobalConfiguration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalConfiguration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GlobalConfiguration must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GlobalConfiguration", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GlobalConfiguration | null {
    return changetype<GlobalConfiguration | null>(
      store.get_in_block("GlobalConfiguration", id),
    );
  }

  static load(id: string): GlobalConfiguration | null {
    return changetype<GlobalConfiguration | null>(
      store.get("GlobalConfiguration", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feeCollector(): string | null {
    let value = this.get("feeCollector");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feeCollector(value: string | null) {
    if (!value) {
      this.unset("feeCollector");
    } else {
      this.set("feeCollector", Value.fromString(<string>value));
    }
  }
}

export class AccountLiquidated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountLiquidated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountLiquidated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AccountLiquidated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AccountLiquidated | null {
    return changetype<AccountLiquidated | null>(
      store.get_in_block("AccountLiquidated", id),
    );
  }

  static load(id: string): AccountLiquidated | null {
    return changetype<AccountLiquidated | null>(
      store.get("AccountLiquidated", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountId(): BigInt {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountId(value: BigInt) {
    this.set("accountId", Value.fromBigInt(value));
  }

  get liquidationReward(): BigInt {
    let value = this.get("liquidationReward");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidationReward(value: BigInt) {
    this.set("liquidationReward", Value.fromBigInt(value));
  }

  get fullyLiquidated(): boolean {
    let value = this.get("fullyLiquidated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set fullyLiquidated(value: boolean) {
    this.set("fullyLiquidated", Value.fromBoolean(value));
  }
}

export class PositionLiquidated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PositionLiquidated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PositionLiquidated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PositionLiquidated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PositionLiquidated | null {
    return changetype<PositionLiquidated | null>(
      store.get_in_block("PositionLiquidated", id),
    );
  }

  static load(id: string): PositionLiquidated | null {
    return changetype<PositionLiquidated | null>(
      store.get("PositionLiquidated", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountId(): BigInt {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountId(value: BigInt) {
    this.set("accountId", Value.fromBigInt(value));
  }

  get marketId(): BigInt {
    let value = this.get("marketId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketId(value: BigInt) {
    this.set("marketId", Value.fromBigInt(value));
  }

  get amountLiquidated(): BigInt {
    let value = this.get("amountLiquidated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountLiquidated(value: BigInt) {
    this.set("amountLiquidated", Value.fromBigInt(value));
  }

  get currentPositionSize(): BigInt {
    let value = this.get("currentPositionSize");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentPositionSize(value: BigInt) {
    this.set("currentPositionSize", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CollateralModified extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollateralModified entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollateralModified must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CollateralModified", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CollateralModified | null {
    return changetype<CollateralModified | null>(
      store.get_in_block("CollateralModified", id),
    );
  }

  static load(id: string): CollateralModified | null {
    return changetype<CollateralModified | null>(
      store.get("CollateralModified", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountId(): BigInt {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountId(value: BigInt) {
    this.set("accountId", Value.fromBigInt(value));
  }

  get synthMarketId(): BigInt {
    let value = this.get("synthMarketId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set synthMarketId(value: BigInt) {
    this.set("synthMarketId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class MarketUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketUpdated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketUpdated | null {
    return changetype<MarketUpdated | null>(
      store.get_in_block("MarketUpdated", id),
    );
  }

  static load(id: string): MarketUpdated | null {
    return changetype<MarketUpdated | null>(store.get("MarketUpdated", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get marketId(): BigInt {
    let value = this.get("marketId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketId(value: BigInt) {
    this.set("marketId", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get skew(): BigInt {
    let value = this.get("skew");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set skew(value: BigInt) {
    this.set("skew", Value.fromBigInt(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get sizeDelta(): BigInt {
    let value = this.get("sizeDelta");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sizeDelta(value: BigInt) {
    this.set("sizeDelta", Value.fromBigInt(value));
  }

  get currentFundingRate(): BigInt {
    let value = this.get("currentFundingRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentFundingRate(value: BigInt) {
    this.set("currentFundingRate", Value.fromBigInt(value));
  }

  get currentFundingVelocity(): BigInt {
    let value = this.get("currentFundingVelocity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentFundingVelocity(value: BigInt) {
    this.set("currentFundingVelocity", Value.fromBigInt(value));
  }
}

export class InterestCharged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InterestCharged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InterestCharged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("InterestCharged", id.toString(), this);
    }
  }

  static loadInBlock(id: string): InterestCharged | null {
    return changetype<InterestCharged | null>(
      store.get_in_block("InterestCharged", id),
    );
  }

  static load(id: string): InterestCharged | null {
    return changetype<InterestCharged | null>(store.get("InterestCharged", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get accountId(): BigInt {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountId(value: BigInt) {
    this.set("accountId", Value.fromBigInt(value));
  }

  get interest(): BigInt {
    let value = this.get("interest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interest(value: BigInt) {
    this.set("interest", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class AccountFlaggedForLiquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AccountFlaggedForLiquidation entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountFlaggedForLiquidation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AccountFlaggedForLiquidation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AccountFlaggedForLiquidation | null {
    return changetype<AccountFlaggedForLiquidation | null>(
      store.get_in_block("AccountFlaggedForLiquidation", id),
    );
  }

  static load(id: string): AccountFlaggedForLiquidation | null {
    return changetype<AccountFlaggedForLiquidation | null>(
      store.get("AccountFlaggedForLiquidation", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get accountId(): BigInt {
    let value = this.get("accountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accountId(value: BigInt) {
    this.set("accountId", Value.fromBigInt(value));
  }

  get availableMargin(): BigInt {
    let value = this.get("availableMargin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set availableMargin(value: BigInt) {
    this.set("availableMargin", Value.fromBigInt(value));
  }

  get requiredMaintenanceMargin(): BigInt {
    let value = this.get("requiredMaintenanceMargin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set requiredMaintenanceMargin(value: BigInt) {
    this.set("requiredMaintenanceMargin", Value.fromBigInt(value));
  }

  get liquidationReward(): BigInt {
    let value = this.get("liquidationReward");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidationReward(value: BigInt) {
    this.set("liquidationReward", Value.fromBigInt(value));
  }

  get flagReward(): BigInt {
    let value = this.get("flagReward");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set flagReward(value: BigInt) {
    this.set("flagReward", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class PositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Position[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Position[]>(value);
  }
}

export class LiquidationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Liquidation[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Liquidation[]>(value);
  }
}

export class TradeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Trade[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Trade[]>(value);
  }
}
